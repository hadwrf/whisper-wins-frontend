generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Auction {
  contractAddress String        @unique @map("contract_address")
  ownerAddress    String        @map("owner_address")
  nftAddress      String        @map("nft_address")
  tokenId         String        @map("token_id")
  status          AuctionStatus @default(NFT_TRANSFER_PENDING) @map("status")
  bids            Bid[]
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @default(now()) @map("updated_at")

  @@map("auctions")
}

enum AuctionStatus {
  NFT_TRANSFER_PENDING
  IN_PROGRESS
  WINNER_CLAIM_PENDING
  ENDED
  START_PENDING
}

enum BidStatus {
  ACTIVE
  WINNER
  LOSER
}

model Bid {
  id                Int      @id @default(autoincrement())
  auction           Auction  @relation(fields: [auctionAddress], references: [contractAddress])
  auctionAddress    String   @map(name: "auction_address")
  bidderAddress     String   @map(name: "bidder_address")
  l1Address         String   @map(name: "l1_address")
  amount            Float    @map(name: "amount")
  status            BidStatus @default(ACTIVE) @map(name: "status")
  createdAt         DateTime @default(now()) @map(name: "created_at")
  updatedAt         DateTime @default(now()) @map(name: "updated_at")

  @@map("bids")
}

model Notification {
  id            Int       @id @default(autoincrement())
  userAddress   String    @map(name: "user_address")
  message       String    @map(name: "message")
  read          Boolean   @default(false)   @map(name: "read")
  createdAt     DateTime  @default(now())   @map(name: "created_at")
  updatedAt     DateTime  @default(now())   @map(name: "updated_at")

  @@map("notifications")
}
