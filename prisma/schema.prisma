generator client {
  provider = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Auction {
  contractAddress     String        @unique @map("contract_address")
  ownerAddress        String        @map("owner_address")
  nftAddress          String        @map("nft_address")
  tokenId             String        @map("token_id")
  status              AuctionStatus @default(NFT_TRANSFER_ADDRESS_PENDING) @map("status")
  endTime             DateTime      @map("end_time")
  minimumBid          Float         @map("minimum_bid")
  winnerAddres        String?       @map("winner_address")
  nftTransferAddress  String?       @map("nft_transfer_address")
  resultClaimed       Boolean       @default(false) @map("result_claimed")
  createdAt           DateTime      @default(now()) @map("created_at")
  updatedAt           DateTime      @default(now()) @map("updated_at")
  bids                Bid[]

  @@map("auctions")
}

model Bid {
  id             Int       @id @default(autoincrement())
  status         BidStatus @default(ACTIVE) @map("status")
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @default(now()) @map("updated_at")
  bidderAddress  String    @map("bidder_address")
  auctionAddress String    @map("auction_address")
  amount         Float     @map("amount")
  l1Address      String    @map("l1_address")
  auction        Auction   @relation(fields: [auctionAddress], references: [contractAddress])

  @@map("bids")
}

model Notification {
  id              Int               @id @default(autoincrement())
  type            NotificationType  @default(AUCTION_TIME_END) @map("type")
  auctionAddress  String            @map("auction_address")
  userAddress     String            @map("user_address")
  userType        ParticipantType   @default(BIDDER) @map("user_type")
  nftAddress      String            @map("nft_address")
  nftTokenId      String            @map("nft_token_id")
  nftName         String            @map("nft_name")
  read            Boolean           @default(false) @map("read")
  clicked         Boolean           @default(false) @map("clicked")
  createdAt       DateTime          @default(now()) @map("created_at")
  updatedAt       DateTime          @default(now()) @map("updated_at")

  @@map("notifications")
}

enum AuctionStatus {
  NFT_TRANSFER_ADDRESS_PENDING
  NFT_TRANSFER_PENDING
  START_PENDING
  IN_PROGRESS
  TIME_ENDED
  RESOLVED
}

enum BidStatus {
  ACTIVE
  WINNER
  LOSER
}

enum NotificationType {
  AUCTION_TIME_END
  AUCTION_WON
  AUCTION_LOST
  CLAIM_HIGHEST_BID
}

enum ParticipantType {
  AUCTIONEER
  BIDDER
}
